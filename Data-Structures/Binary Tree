// Most of the credit goes to: https://gist.github.com/toboqus/def6a6915e4abd66e922

#include <iostream>
#include <string>

using namespace std;

struct Node {
    string value;
    Node * left;
    Node * right;
};

class Binary_tree {
private:
    Node * root;

    // adding new element to the binary tree
    void insert(string searched_value, Node * leaf) {
        if(searched_value < leaf->value) {
            if(leaf->left != NULL) {
                insert(searched_value, leaf->left);
            } else {
                leaf->left = new Node;
                leaf->left->value = searched_value;
                leaf->left->left = NULL;
                leaf->left->right = NULL;
            }
        }else if(searched_value >= leaf->value){
            if(leaf->right != NULL) {
                insert(searched_value, leaf->right);
            } else {
                leaf->right = new Node;
                leaf->right->value = searched_value;
                leaf->right->right = NULL;
                leaf->right->left = NULL;
            }
        }
    }

    // searching for leaf with given value
    Node * search(string searched_value, Node * leaf) {
        if(leaf != NULL) {
            if(searched_value == leaf->value) {
                return leaf;
            } else {
                if(searched_value < leaf->value) {
                    return search(searched_value, leaf->left);
                } else {
                    return search(searched_value, leaf->right);
                }
            }
        } else {
            return NULL;
        }
    }

    // deleting binary tree using preorder search
    void delete_tree(Node * leaf) {
        if(leaf != NULL) {
            delete_tree(leaf->left);
            delete_tree(leaf->right);
            delete leaf;
        }
    }

    // printing the binary tree using preorder traversal
    void preorder_traversal(Node * leaf) {
        if(leaf != NULL) {
            cout << leaf->value << ",";
            preorder_traversal(leaf->left);
            preorder_traversal(leaf->right);
        }
    }

    // printing the binary tree using inorder traversal
    void inorder_traversal(Node * leaf) {
        if(leaf != NULL) {
            inorder_traversal(leaf->left);
            cout << leaf->value << ",";
            inorder_traversal(leaf->right);
        }
    }

    // printing the binary tree using postorder traversal
    void postorder_traversal(Node * leaf) {
        if(leaf != NULL) {
            postorder_traversal(leaf->right);
            postorder_traversal(leaf->left);
            cout << leaf->value << ",";
        }
    }
public:
    // Constructor
    Binary_tree() {
        root = NULL;
    }

    // Destructor
    ~Binary_tree() {
        delete_tree();
    }

    // adding new element to the binary tree
    void insert(string new_value) {
        if(root != NULL) {
            insert(new_value, root);
        } else {
            root = new Node;
            root->value= new_value;
            root->left = NULL;
            root->right = NULL;
        }
    }

    // searching for leaf with given value
    Node * search(string searched_value) {
        return search(searched_value, root);
    }

    // deleting binary tree using preorder search
    void delete_tree() {
        return delete_tree(root);
    }

    // printing the binary tree using preorder traversal
    void preorder_traversal() {
        preorder_traversal(root);
        cout << endl;
    }

    // printing the binary tree using inorder traversal
    void inorder_traversal() {
        inorder_traversal(root);
        cout << endl;
    }

    // printing the binary tree using postorder traversal
    void postorder_traversal() {
        postorder_traversal(root);
        cout << endl;
    }
};

int main() {
    Binary_tree * tree = new Binary_tree();

    tree->insert("30");
    tree->insert("50");
    tree->insert("25");
    tree->insert("75");
    tree->insert("100");
    tree->insert("97");
    tree->insert("33");

    cout << "Preorder Traversal: " << endl;
    tree->preorder_traversal();
    cout << "Inorder Traversal: " << endl;
    tree->inorder_traversal();
    cout << "Postorder Traversal: " << endl;
    tree->postorder_traversal();

    return 0;
}
